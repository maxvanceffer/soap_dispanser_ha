#include "DistanceTofSensor.h"
#include "../../GPIO.h"
#include "../../Container.h"

#define DISTANCE_SENSOR_XSHUT_PIN 3  // XSHUT –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ GPIO3

DistanceTofSensor::DistanceTofSensor() : lox(), handDetectThresholdMm(100) {
  addSupportFeature("distance", true);
  addSupportFeature("hand", true);
}

String DistanceTofSensor::name() const {
  return "DistanceSensor";
}

ServiceValue DistanceTofSensor::getValue(String key) const {
  if (key == "handDetected") {
    return ServiceValue(detectHand());
  }
  return ServiceValue();
}

bool DistanceTofSensor::execute(String fnName, JsonVariant args) {
  if (fnName == "detectHand") {
    return detectHand();
  }
  return false;
}

void DistanceTofSensor::begin() {
  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É–∫–∏
  String distanceStr = Container::getInstance()->getStorage().getItem("hand_distance_threshold", "100");
  handDetectThresholdMm = distanceStr.toInt();
  Serial.printf("üõ† –ü–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä—É–∫–∏: %d –º–º\n", handDetectThresholdMm);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è XSHUT
  pinMode(DISTANCE_SENSOR_XSHUT_PIN, OUTPUT);
  digitalWrite(DISTANCE_SENSOR_XSHUT_PIN, HIGH);
  delay(100);

  Wire.begin(8, 9);

  if (!lox.begin()) {
    Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ VL53L0X");
    setReady(false);
    return;
  }

  Serial.println("‚úÖ TOF-—Å–µ–Ω—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  setReady(true);
}

void DistanceTofSensor::loop() {
  VL53L0X_RangingMeasurementData_t measure;
  lox.rangingTest(&measure, false);

  if (measure.RangeStatus != 4) {
    Serial.print("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ");
    Serial.print(measure.RangeMilliMeter);
    Serial.println(" –º–º");
  } else {
    Serial.println("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ –∑–æ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è");
  }
}

bool DistanceTofSensor::detectHand() const {
  VL53L0X_RangingMeasurementData_t measure;
  lox.rangingTest(&measure, false);

  if (measure.RangeStatus != 4 && measure.RangeMilliMeter <= handDetectThresholdMm) {
    Serial.printf("üñê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä—É–∫–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ %d –º–º\n", measure.RangeMilliMeter);
    return true;
  }

  return false;
}